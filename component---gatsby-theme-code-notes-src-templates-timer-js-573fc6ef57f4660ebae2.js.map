{"version":3,"file":"component---gatsby-theme-code-notes-src-templates-timer-js-573fc6ef57f4660ebae2.js","mappings":"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","sources":["webpack://example/../gatsby-theme-code-notes/src/templates/timer.js"],"sourcesContent":["import React, {useState, useEffect, useRef, useCallback} from 'react';\nimport { Layout } from '../components/Layout'\nimport {Heading, Box, Text, Button, Input} from 'theme-ui'\n\nconst Timer = ({ pageContext, location }) => {\n  const [inputHour, setInputHour] = useState(0);\n  const [inputMinute, setInputMinute] = useState(0);\n  const [inputSecond, setInputSecond] = useState(0);\n\n  const [hour, setHour] = useState(0);\n  const [minute, setMinute] = useState(0);\n  const [second, setSecond] = useState(0);\n\n  const interval = useRef(null);\n  const remainTime = useRef(0);\n\n  const [isSetting, setSetting] = useState(false);\n  const [isStart, setStart] = useState(false);\n\n  useEffect(() => {\n    interval.current = setInterval(tick, 1000);\n    return () => clearInterval(interval.current);\n  }, [isStart, isSetting]);\n\n  useEffect(() => {\n    if (remainTime.current <= 0) {\n      clearInterval(interval.current);\n    }\n  }, [second]);\n\n  const tick = useCallback(() => {\n    if (!isStart) return;\n\n    remainTime.current -= 1;\n\n    const remainHour = parseInt(remainTime.current / 60 / 60);\n    const remainMinute = parseInt((remainTime.current % 3600) / 60);\n    const remainSecond = remainTime.current % 60;\n    setHour(remainHour);\n    setMinute(remainMinute);\n    setSecond(remainSecond);\n  }, [isStart, isSetting])\n\n  const handleSetting = () => {\n    setSetting(true);\n    setStart(false);\n  }\n\n  const handleConfirm= () => {\n    setSetting(false);\n    setHour(inputHour);\n    setMinute(inputMinute);\n    setSecond(inputSecond);\n    remainTime.current = inputHour * 60 * 60 + inputMinute * 60 + inputSecond;\n    setStart(false);\n  }\n\n  const handleStart = () => {\n    if (isSetting) return;\n    setStart(true);\n  }\n\n  const handleStop = () => {\n    if (isSetting) return;\n    setStart(false);\n  }\n\n  const handleReset = () => {\n    if (isSetting) return;\n    setHour(inputHour);\n    setMinute(inputMinute);\n    setSecond(inputSecond);\n    remainTime.current = inputHour * 60 * 60 + inputMinute * 60 + inputSecond;\n    setStart(false);\n  }\n\n  return (\n      <Layout\n          path={location.pathname}\n          basePath={pageContext.basePath}\n          hasUntagged={pageContext.hasUntagged}\n          tags={pageContext.tags}\n          title={'Timer'}\n      >\n        <Box as=\"header\" sx={{ mb: 4 }}>\n          <Heading as=\"h1\" variant=\"noteTitle\">\n            Timer\n          </Heading>\n        </Box>\n\n        <Box sx={styles.timerContainer}>\n          <Input\n              sx={isSetting? styles.settingInput : styles.notSettingInput}\n              value={isSetting? inputHour : hour}\n              maxLength={2}\n              onChange={(event) => {\n                const value = event.target.value? event.target.value : 0;\n                setInputHour(parseInt(value));\n              }}\n              placeholder=\"Hour\"\n              disabled={!isSetting}\n          />\n          <Text sx={styles.timerDividerText}> : </Text>\n          <Input\n              sx={isSetting? styles.settingInput : styles.notSettingInput}\n              value={isSetting? inputMinute : minute}\n              maxLength={2}\n              onChange={(event) => {\n                const value = event.target.value? event.target.value : 0;\n                setInputMinute(parseInt(value));\n              }}\n              placeholder=\"Minute\"\n              disabled={!isSetting}\n          />\n          <Text sx={styles.timerDividerText}> : </Text>\n          <Input\n              sx={isSetting? styles.settingInput : styles.notSettingInput}\n              value={isSetting? inputSecond : second}\n              maxLength={2}\n              onChange={(event) => {\n                const value = event.target.value? event.target.value : 0;\n                setInputSecond(parseInt(value));\n              }}\n              placeholder=\"Second\"\n              disabled={!isSetting}\n          />\n        </Box>\n\n        <Box sx={styles.buttonContainer}>\n          <Box sx={styles.leftButtonContainer}>\n            {isSetting?\n                <Button\n                    sx={styles.enableButton}\n                    onClick={() => handleConfirm()}>\n                  Confirm\n                </Button>\n                :\n                <Button\n                    sx={styles.enableButton}\n                    onClick={() => handleSetting()}>\n                  Time Setting\n                </Button>\n            }\n          </Box>\n          <Box sx={styles.rightButtonContainer}>\n            {isStart?\n                <Button\n                    sx={isSetting? styles.disableButton : styles.enableButton}\n                    onClick={() => handleStop()}\n                    disabled={isSetting}>\n                  Stop\n                </Button>\n                :\n                <Button\n                    sx={isSetting? styles.disableButton : styles.enableButton}\n                    onClick={() => handleStart()}\n                    disabled={isSetting}>\n                  Start\n                </Button>\n            }\n            <Button\n                sx={isSetting? styles.disableButton : styles.enableButton}\n                onClick={() => handleReset()}\n                disabled={isSetting}>\n              Reset\n            </Button>\n          </Box>\n        </Box>\n      </Layout>\n  )\n}\n\nconst styles = {\n  timerContainer: {\n    flexDirection : 'row',\n    display: 'flex',\n    ml: 2,\n    mr: 2,\n    mt: '100px',\n    mb: '200px',\n    p: 0\n  },\n  buttonContainer: {\n    flexDirection : 'row',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  leftButtonContainer: {\n    flexDirection : 'row',\n    display: 'flex',\n    justifyContent: 'flex-start'\n  },\n  rightButtonContainer: {\n    flexDirection : 'row',\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  timerDividerText: {\n    textAlign: 'center',\n    fontSize: 120,\n    fontWeight: 'bold',\n    width: 240,\n    ml: 2,\n    mr: 2,\n    p: 0,\n  },\n  notSettingInput: {\n    textAlign : 'center',\n    color: 'text',\n    fontSize: 120,\n    fontWeight: 'bold',\n    borderWidth: 0,\n    ml: 2,\n    mr: 2,\n    p: 0,\n  },\n  settingInput: {\n    textAlign : 'center',\n    color: 'text',\n    fontSize: 120,\n    fontWeight: 'bold',\n    border: 'solid 4px',\n    borderColor: 'text',\n    borderRadius: 10,\n    ml: 2,\n    mr: 2,\n    p: 0,\n  },\n  enableButton: {\n    ml: 2,\n    mr: 2,\n  },\n  disableButton: {\n    ml: 2,\n    mr: 2,\n    backgroundColor: '#718096',\n  }\n}\n\nexport default Timer\n"],"names":["styles","timerContainer","flexDirection","display","ml","mr","mt","mb","p","buttonContainer","justifyContent","leftButtonContainer","rightButtonContainer","timerDividerText","textAlign","fontSize","fontWeight","width","notSettingInput","color","borderWidth","settingInput","border","borderColor","borderRadius","enableButton","disableButton","backgroundColor","pageContext","location","useState","inputHour","setInputHour","inputMinute","setInputMinute","inputSecond","setInputSecond","hour","setHour","minute","setMinute","second","setSecond","interval","useRef","remainTime","isSetting","setSetting","isStart","setStart","useEffect","current","setInterval","tick","clearInterval","useCallback","remainHour","parseInt","remainMinute","remainSecond","path","pathname","basePath","hasUntagged","tags","title","as","sx","variant","value","maxLength","onChange","event","target","placeholder","disabled","onClick"],"sourceRoot":""}